{"version":3,"sources":["components/SecondRequest.js","components/CityId.ts","components/hooks/UseFetch.js","components/FirstRequest.js","ListOfReq.js","components/AppRouter.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["Column","Table","ColumnGroup","GetData2","history","useHistory","id","useParams","_getData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","dataResponse","wrap","_context","prev","next","fetch","concat","process","sent","json","abrupt","stop","apply","arguments","_useState","useState","_useState2","_slicedToArray","data","setData","useEffect","_x","getData","then","console","log","dataSource","list","map","element","dt_txt","feels_like","Math","round","main","humidity","pressure","temp","temp_min","temp_max","speed","wind","description","weather","weatherIconID","weatherIcon","icon","React","createElement","Fragment","onClick","push","className","title","dataIndex","key","render","Tag","color","text","width","src","alt","CityId","name","useFetch","url","_fetchData","fetchData","GetData","props","inputState","Row","Col","span","Link","to","toString","city","ListOfReq","it","AppRouter","Switch","Route","exact","path","SecondRequest","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fa0626e1.chunk.js","sourcesContent":["import { Table, Tag } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst { Column, ColumnGroup } = Table;\r\n\r\nfunction GetData2() {\r\n  let history = useHistory();\r\n\r\n  let { id } = useParams();\r\n\r\n  async function getData(id) {\r\n    const response = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/forecast?id=${id}&appid=${process.env.REACT_APP_API_KEY}`\r\n    );\r\n\r\n    const dataResponse = await response.json();\r\n    return dataResponse;\r\n  }\r\n  const [data, setData] = useState();\r\n\r\n  useEffect(() => {\r\n    getData(id).then((dataResponse) => {\r\n      console.log(data);\r\n\r\n      if (dataResponse) {\r\n        const dataSource = dataResponse.list.map((element) => {\r\n          return {\r\n            dt_txt: element.dt_txt,\r\n            feels_like: Math.round(element.main.feels_like - 273),\r\n            humidity: element.main.humidity,\r\n            pressure: element.main.pressure,\r\n            temp: Math.round(element.main.temp - 273),\r\n            temp_min: Math.round(element.main.temp_min - 273),\r\n            temp_max: Math.round(element.main.temp_max - 273),\r\n            speed: element.wind.speed,\r\n            description: element.weather[0].description,\r\n            weatherIconID: element.weather[0].id,\r\n            weatherIcon: element.weather[0].icon,\r\n          };\r\n        });\r\n\r\n        console.log(\"got it \");\r\n        console.log(dataSource);\r\n        setData(dataSource);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  if (data) {\r\n    return (\r\n      <>\r\n        <button onClick={() => history.push(\"/\")}> Back to cities </button>\r\n        <Table className=\"someClass\" dataSource={data}>\r\n          <Column\r\n            title=\"date  time\"\r\n            dataIndex=\"dt_txt\"\r\n            key=\"dt_txt\"\r\n            className=\"DTX\"\r\n            render={(dt_txt) => (\r\n              <Tag color=\"\" key={dt_txt}>\r\n                {\" \"}\r\n                {dt_txt}{\" \"}\r\n              </Tag>\r\n            )}\r\n          />\r\n\r\n          <ColumnGroup title=\"temperature\">\r\n            <Column\r\n              title=\"temp_max\"\r\n              dataIndex=\"temp_max\"\r\n              key=\"temp_max\"\r\n              className=\"Maxa\"\r\n              render={(temp_min) => (\r\n                <Tag color=\"\" key={temp_min}>\r\n                  {\" \"}\r\n                  {temp_min}{\" \"}\r\n                </Tag>\r\n              )}\r\n            />\r\n\r\n            <Column\r\n              title=\"feels_like\"\r\n              dataIndex=\"feels_like\"\r\n              key=\"feels_like\"\r\n              className=\"Fila\"\r\n              render={(feels_like) => (\r\n                <Tag color=\"\" key={feels_like}>\r\n                  {\" \"}\r\n                  {feels_like}{\" \"}\r\n                </Tag>\r\n              )}\r\n            />\r\n\r\n            <Column\r\n              title=\"temp_min\"\r\n              dataIndex=\"temp_min\"\r\n              key=\"temp_min\"\r\n              className=\"Mina\"\r\n              render={(temp_min) => (\r\n                <Tag color=\"\" key={temp_min}>\r\n                  {\" \"}\r\n                  {temp_min}{\" \"}\r\n                </Tag>\r\n              )}\r\n            />\r\n\r\n            <Column\r\n              title=\"current_t\"\r\n              dataIndex=\"temp\"\r\n              key=\"temp\"\r\n              className=\"Tempa\"\r\n              render={(temp) => (\r\n                <Tag color=\"\" key={temp}>\r\n                  {\" \"}\r\n                  {temp}{\" \"}\r\n                </Tag>\r\n              )}\r\n            />\r\n          </ColumnGroup>\r\n          <Column\r\n            title=\"humidity\"\r\n            dataIndex=\"humidity\"\r\n            key=\"humidity\"\r\n            className=\"Humud\"\r\n            render={(pressure) => (\r\n              <Tag color=\"\" key={pressure}>\r\n                {\" \"}\r\n                {pressure}{\" \"}\r\n              </Tag>\r\n            )}\r\n          />\r\n          <Column\r\n            title=\"pressure\"\r\n            dataIndex=\"pressure\"\r\n            key=\"pressure\"\r\n            className=\"Press\"\r\n            render={(pressure) => (\r\n              <Tag color=\"\" key={pressure}>\r\n                {\" \"}\r\n                {pressure}{\" \"}\r\n              </Tag>\r\n            )}\r\n          />\r\n          <Column\r\n            title=\"wind_speed\"\r\n            dataIndex=\"speed\"\r\n            key=\"speed\"\r\n            className=\"Speed\"\r\n          />\r\n          <Column\r\n            title=\"description\"\r\n            dataIndex=\"weatherIcon\"\r\n            key=\"weatherIcon\"\r\n            className=\"DESC\"\r\n            render={(weatherIcon, text) => {\r\n              return (\r\n                <div className=\"icons\">\r\n                  {text.description}{\" \"}\r\n                  <img\r\n                    width=\"75\"\r\n                    src={`http://openweathermap.org/img/wn/${weatherIcon}@2x.png`}\r\n                    alt=\"imagebitch\"\r\n                  />\r\n                </div>\r\n              );\r\n            }}\r\n          />\r\n        </Table>\r\n      </>\r\n    );\r\n  } else {\r\n    return <div>loading</div>;\r\n  }\r\n}\r\n\r\nexport default GetData2;\r\n","export const CityId = [\r\n  {\r\n    id: 703448,\r\n    name: \"Kiev\",\r\n  },\r\n  {\r\n    id: 702550,\r\n    name: \"Lviv\",\r\n  },\r\n  {\r\n    id: 710735,\r\n    name: \"Chernihiv\",\r\n  },\r\n  {\r\n    id: 706483,\r\n    name: \"Kharkiv\",\r\n  },\r\n  {\r\n    id: 686967,\r\n    name: \"Zhytomyr\",\r\n  },\r\n  {\r\n    id: 692194,\r\n    name: \"Sumy\",\r\n  },\r\n  {\r\n    id: 695594,\r\n    name: \"Rivne\",\r\n  },\r\n  {\r\n    id: 698740,\r\n    name: \"Odessa\",\r\n  },\r\n  {\r\n    id: 709930,\r\n    name: \"Dnipropetrovsk\",\r\n  },\r\n  {\r\n    id: 696643,\r\n    name: \"Poltava\",\r\n  },\r\n];\r\nexport default CityId;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport default function useFetch(url) {\r\n  const [data, setData] = useState(null);\r\n\r\n  async function fetchData() {\r\n    const response = await fetch(url);\r\n    const json = await response.json();\r\n    console.log(json);\r\n    setData(json);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n  return data;\r\n}\r\n","import React from \"react\";\r\nimport { Row, Col } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useFetch from \"./hooks/UseFetch\";\r\n\r\nexport default function GetData(props) {\r\n  const data = useFetch(\r\n    `https://api.openweathermap.org/data/2.5/forecast?id=${props.id}&appid=${process.env.REACT_APP_API_KEY}`\r\n  );\r\n\r\n  if (!data) {\r\n    return <>Loading...</>;\r\n  } else {\r\n    return (\r\n      <>\r\n        {console.log(props.inputState, \"id in GD\")}\r\n        <div>\r\n          <ul>\r\n            <Row>\r\n              <Col span={6}>\r\n                <li>\r\n                  <Link to={`cities/` + props.id.toString()}>\r\n                    {data.city.name}{\" \"}\r\n                  </Link>\r\n                </li>\r\n              </Col>\r\n\r\n              <Col span={6}>\r\n                temperature: {Math.round(data.list[0].main.temp - 273)}\r\n              </Col>\r\n\r\n              <Col span={6}>wind_speed:{data.list[0].wind.speed}</Col>\r\n              <Col span={6}>\r\n                description: {data.list[0].weather[0].description}\r\n              </Col>\r\n            </Row>\r\n          </ul>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport CityId from \"./components/CityId\";\r\nimport GetData from \"./components/FirstRequest\";\r\n\r\nexport default function ListOfReq() {\r\n  return (\r\n    <div className=\"App\">\r\n      {CityId.map((it) => (\r\n        <GetData id={it.id} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { BrowserRouter as Switch, Route } from \"react-router-dom\";\r\nimport SecondRequest from \"./SecondRequest\";\r\nimport ListOfReq from \"../ListOfReq\";\r\n\r\nfunction AppRouter() {\r\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\r\n  return (\r\n    <>\r\n      {\" \"}\r\n      {/* <pre>{process.env.REACT_APP_APIKEY}</pre> */}\r\n      <Switch>\r\n        {/* <Route exact path=\"/\">\r\n        <Home />\r\n      </Route> */}\r\n\r\n        <Route exact path=\"/\">\r\n          <ListOfReq />\r\n        </Route>\r\n\r\n        <Route exact path=\"/cities/:id\">\r\n          <SecondRequest />\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\nexport default AppRouter;\r\n","import \"antd/dist/antd.css\";\r\nimport React from \"react\";\r\nimport AppRouter from \"./components/AppRouter\";\r\n\r\nfunction App() {\r\n  return <AppRouter />;\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}